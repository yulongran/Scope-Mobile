var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
import { ActivityIndicator, StyleSheet, TouchableOpacity, } from 'react-native';
import styled from 'styled-components/native';
import React from 'react';
var COLOR = {
    WHITE: '#ffffff',
    DODGERBLUE: '#3a8bff',
    VERYLIGHTGRAY: '#cccccc',
    LIGHTGRAY: '#c8c8c8',
    BLUE: '#0000ff',
    STRONGBLUE: '#069ccd',
    GRAY3: '#080808',
    GRAY7: '#121212',
    GRAY59: '#969696',
};
export var THEME = {
    LIGHT: {
        backgroundColor: COLOR.WHITE,
        borderColor: COLOR.BLUE,
        fontColor: COLOR.STRONGBLUE,
        INVERTED: {
            backgroundColor: COLOR.BLUE,
            borderColor: COLOR.STRONGBLUE,
            fontColor: COLOR.WHITE,
        },
        DISABLED: {
            backgroundColor: COLOR.VERYLIGHTGRAY,
            borderColor: COLOR.LIGHTGRAY,
            fontColor: COLOR.GRAY59,
        },
    },
    DARK: {
        backgroundColor: COLOR.WHITE,
        borderColor: COLOR.GRAY7,
        fontColor: COLOR.GRAY3,
        INVERTED: {
            backgroundColor: COLOR.GRAY7,
            borderColor: COLOR.GRAY3,
            fontColor: COLOR.WHITE,
        },
        DISABLED: {
            backgroundColor: COLOR.VERYLIGHTGRAY,
            borderColor: COLOR.LIGHTGRAY,
            fontColor: COLOR.GRAY59,
        },
    },
};
var StyledButton = styled.View(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  width: 320px;\n  height: 52px;\n  background-color: ", ";\n  border-color: ", ";\n  border-radius: 4px;\n  border-width: 2px;\n  justify-content: center;\n  align-items: center;\n  flex-direction: row;\n"], ["\n  width: 320px;\n  height: 52px;\n  background-color: ", ";\n  border-color: ", ";\n  border-radius: 4px;\n  border-width: 2px;\n  justify-content: center;\n  align-items: center;\n  flex-direction: row;\n"])), function (_a) {
    var theme = _a.theme;
    return theme.backgroundColor;
}, function (_a) {
    var theme = _a.theme;
    return theme.borderColor;
});
var Text = styled.Text(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  font-size: 14px;\n  color: ", ";\n"], ["\n  font-size: 14px;\n  color: ", ";\n"])), function (_a) {
    var theme = _a.theme;
    return theme.fontColor;
});
var IconLeft = styled.View(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  position: absolute;\n  left: 0;\n"], ["\n  position: absolute;\n  left: 0;\n"])));
var IconRight = styled.View(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n  position: absolute;\n  right: 0;\n"], ["\n  position: absolute;\n  right: 0;\n"])));
var getDefaultTheme = function (_a) {
    var dark = _a.dark, inverted = _a.inverted, isDisabled = _a.isDisabled;
    var theme = dark ? THEME.DARK : THEME.LIGHT;
    if (isDisabled) {
        return theme.DISABLED;
    }
    return inverted ? theme.INVERTED : theme;
};
var getText = function (_a) {
    var children = _a.children, text = _a.text, style = _a.style, theme = _a.theme;
    if (typeof children === 'undefined') {
        return (<Text style={style} theme={theme}>{text}</Text>);
    }
    if (typeof children === 'string') {
        return (<Text style={style} theme={theme}>{children}</Text>);
    }
    return children;
};
function Button(props) {
    var testID = props.testID, style = props.style, textStyle = props.textStyle, dark = props.dark, inverted = props.inverted, isLoading = props.isLoading, isDisabled = props.isDisabled, iconLeft = props.iconLeft, iconRight = props.iconRight, indicatorColor = props.indicatorColor, activeOpacity = props.activeOpacity, children = props.children, text = props.text, onClick = props.onClick;
    var buttonStyleToApply = StyleSheet.flatten(style);
    var textStyleToApply = StyleSheet.flatten(textStyle);
    var defaultTheme = getDefaultTheme({
        dark: dark,
        inverted: inverted,
        isDisabled: isDisabled,
    });
    var buttonThemeToApply = {
        backgroundColor: buttonStyleToApply.backgroundColor || defaultTheme.backgroundColor,
        borderColor: buttonStyleToApply.borderColor || defaultTheme.borderColor,
    };
    var textThemeToApply = {
        fontColor: textStyleToApply.color || defaultTheme.fontColor,
    };
    var textToRender = getText({
        children: children,
        text: text,
        style: textStyleToApply,
        theme: textThemeToApply,
    });
    return (<TouchableOpacity testID={testID} activeOpacity={activeOpacity} onPress={onClick} disabled={isDisabled}>
      <StyledButton style={buttonStyleToApply} theme={buttonThemeToApply}>
        {!isLoading && <IconLeft>{iconLeft}</IconLeft>}
        {!isLoading && textToRender}
        {!isLoading && <IconRight>{iconRight}</IconRight>}
        {isLoading && <ActivityIndicator size="small" color={indicatorColor}/>}
      </StyledButton>
    </TouchableOpacity>);
}
Button.defaultProps = {
    style: {},
    textStyle: {},
    indicatorColor: COLOR.WHITE,
    activeOpacity: 0.5,
};
export default Button;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4;
