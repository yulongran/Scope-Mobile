var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
import * as React from 'react';
import { View } from 'react-native';
import styled from 'styled-components/native';
var Container = styled.View(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  background-color: #f3f5f7;\n  height: 42;\n  margin-left: 20;\n  margin-right: 20;\n  border-radius: 8;\n\n  flex-direction: row;\n"], ["\n  background-color: #f3f5f7;\n  height: 42;\n  margin-left: 20;\n  margin-right: 20;\n  border-radius: 8;\n\n  flex-direction: row;\n"])));
var Input = styled.TextInput(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  flex-grow: 1;\n  align-self: center;\n  font-size: 16;\n"], ["\n  flex-grow: 1;\n  align-self: center;\n  font-size: 16;\n"])));
var ResetContainer = styled.View(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  height: 24;\n  width: 24;\n  margin-left: 2;\n  margin-right: 11;\n  margin-top: 9;\n  margin-bottom: 9;\n  justify-content: center;\n  align-items: center;\n"], ["\n  height: 24;\n  width: 24;\n  margin-left: 2;\n  margin-right: 11;\n  margin-top: 9;\n  margin-bottom: 9;\n  justify-content: center;\n  align-items: center;\n"])));
var Reset = styled.TouchableOpacity(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n  background-color: #c6ccd1;\n  border-radius: 20;\n  width: 20;\n  height: 20;\n  justify-content: center;\n  align-items: center;\n"], ["\n  background-color: #c6ccd1;\n  border-radius: 20;\n  width: 20;\n  height: 20;\n  justify-content: center;\n  align-items: center;\n"])));
var ResetText = styled.Text(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n  color: white;\n"], ["\n  color: white;\n"])));
// reference : https://dev.to/gabe_ragland/debouncing-with-react-hooks-jci
function useDebounce(value, delay) {
    if (delay === void 0) { delay = 400; }
    var _a = React.useState(value), debouncedValue = _a[0], setDebouncedValue = _a[1];
    React.useEffect(function () {
        var handler = setTimeout(function () {
            setDebouncedValue(value);
        }, delay);
        return function () {
            clearTimeout(handler);
        };
    }, [value]);
    return debouncedValue;
}
function SearchInput(props) {
    var _a = React.useState(props.value), value = _a[0], setValue = _a[1];
    var debouncedValue = useDebounce(value, props.debounceDelay);
    React.useEffect(function () {
        if (props.onDebounceOrOnReset) {
            props.onDebounceOrOnReset(debouncedValue);
        }
    }, [debouncedValue]);
    React.useEffect(function () {
        setValue(props.value);
    }, [props.value]);
    return (<Container style={props.style}>
      {props.customIcon ? props.customIcon : <View style={{ width: 10 }}/>}
      <Input testID={'SEARCH_INPUT'} value={value} onChangeText={function (text) {
        setValue(text);
    }} placeholder={props.placeholderText || 'placehoder...'} placeholderTextColor={'#cdd2d7'}/>
      {props.value !== '' && (<ResetContainer>
          <Reset testID={props.testID} onPress={function () {
        if (props.onDebounceOrOnReset) {
            props.onDebounceOrOnReset('');
        }
    }}>
            <ResetText>X</ResetText>
          </Reset>
        </ResetContainer>)}
    </Container>);
}
export default SearchInput;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5;
