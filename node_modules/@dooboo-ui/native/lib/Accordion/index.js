import { Animated, InteractionManager, StyleSheet, TouchableOpacity, View, } from 'react-native';
import React, { useState } from 'react';
var styles = StyleSheet.create({
    container: {
        flex: 1,
        flexDirection: 'column',
        overflow: 'hidden',
    },
    underline: {
        width: '100%',
        height: 1,
        position: 'absolute',
        top: 0,
    },
    content: {
        flex: 1,
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'flex-start',
    },
    contentChild: {
        padding: 12,
    },
    contentView: {
        flexDirection: 'row',
        alignItems: 'center',
        height: '100%',
    },
    contentTxt: {
        color: 'black',
        marginLeft: 8,
        fontSize: 12,
    },
    contentFooter: {
        flex: 1,
        flexDirection: 'row',
        justifyContent: 'flex-start',
        alignItems: 'center',
        height: 48,
        paddingHorizontal: 12,
    },
});
function Accordion(props) {
    var _a = useState(null), animatedValue = _a[0], setAnimatedValue = _a[1];
    var _b = useState(false), isMounted = _b[0], setMounted = _b[1];
    var _c = useState(!!props.contentVisibleOnLoad), isContentVisible = _c[0], setContentVisible = _c[1];
    var _d = useState(0), headerHeight = _d[0], setHeaderHeight = _d[1];
    var _e = useState(0), contentHeight = _e[0], setContentHeight = _e[1];
    var runAnimation = function () {
        var initialValue = isContentVisible
            ? headerHeight + contentHeight
            : headerHeight;
        var finalValue = isContentVisible
            ? headerHeight
            : contentHeight + headerHeight;
        setContentVisible(!isContentVisible);
        if (animatedValue) {
            animatedValue.setValue(initialValue);
            Animated.spring(animatedValue, {
                toValue: finalValue,
            }).start();
        }
    };
    var onAnimLayout = function (evt) {
        var headerHeight = evt.nativeEvent.layout.height;
        if (!isMounted && !props.contentVisibleOnLoad) {
            setAnimatedValue(new Animated.Value(headerHeight));
            setMounted(true);
            setHeaderHeight(headerHeight);
            return;
        }
        else if (!isMounted) {
            InteractionManager.runAfterInteractions(function () {
                setAnimatedValue(new Animated.Value(headerHeight + contentHeight));
            });
        }
        setMounted(true);
        setHeaderHeight(headerHeight);
    };
    var onLayout = function (evt) {
        var contentHeight = evt.nativeEvent.layout.height;
        setContentHeight(contentHeight);
    };
    var onPress = function () {
        runAnimation();
    };
    return (<Animated.View style={[
        styles.container,
        {
            height: animatedValue,
            backgroundColor: props.backgroundColor,
        },
        props.style,
    ]}>
      <TouchableOpacity activeOpacity={0.5} onPress={onPress}>
        <View onLayout={onAnimLayout}>
          {props.header}
          {isContentVisible ? props.visibleElement : props.invisibleElement}
        </View>
      </TouchableOpacity>
      <View style={styles.content} onLayout={onLayout}>
        <View style={[styles.contentChild]}>{props.children}</View>
      </View>
    </Animated.View>);
}
Accordion.defaultProps = {
    contentVisible: false,
    backgroundColor: 'transparent',
    titleBackground: 'transparent',
    contentBackground: 'transparent',
    underlineColor: '#d3d3d3',
    visibleElement: null,
    invisibleElement: null,
};
export default Accordion;
